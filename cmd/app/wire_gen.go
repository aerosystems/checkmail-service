// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"firebase.google.com/go/v4/auth"
	"github.com/aerosystems/checkmail-service/internal/adapters"
	"github.com/aerosystems/checkmail-service/internal/ports/grpc"
	"github.com/aerosystems/checkmail-service/internal/ports/http"
	"github.com/aerosystems/checkmail-service/internal/usecases"
	"github.com/aerosystems/common-service/logger"
	"github.com/aerosystems/common-service/pkg/gcpclient"
	"github.com/aerosystems/common-service/pkg/gormclient"
	"github.com/aerosystems/common-service/presenters/grpcserver"
	"github.com/aerosystems/common-service/presenters/httpserver"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from wire.go:

//go:generate wire
func InitApp() *App {
	logger := ProvideLogger()
	logrusLogger := ProvideLogrusLogger(logger)
	config := ProvideConfig()
	client := ProvideFirebaseAuthClient(config)
	firebaseAuth := ProvideFirebaseAuthMiddleware(client)
	baseHandler := ProvideBaseHandler(logrusLogger, config)
	db := ProvideGORMPostgres(logrusLogger, config)
	accessRepo := ProvideAccessRepo(db)
	domainRepo := ProvideDomainRepo(db)
	filterRepo := ProvideFilterRepo(db)
	inspectUsecase := ProvideInspectUsecase(logrusLogger, accessRepo, domainRepo, filterRepo)
	checkHandler := ProvideCheckHandler(baseHandler, inspectUsecase)
	accessUsecase := ProvideAccessUsecase(accessRepo)
	accessHandler := ProvideAccessHandler(accessUsecase)
	manageUsecase := ProvideManageUsecase(domainRepo, filterRepo)
	domainHandler := ProvideDomainHandler(baseHandler, manageUsecase)
	filterHandler := ProvideFilterHandler(baseHandler, manageUsecase)
	server := ProvideHTTPServer(config, logrusLogger, firebaseAuth, checkHandler, accessHandler, domainHandler, filterHandler)
	grpcServerCheckHandler := ProvideGRPCCheckHandler(inspectUsecase)
	grpcServerServer := ProvideGRPCServer(logrusLogger, config, grpcServerCheckHandler)
	app := ProvideApp(logrusLogger, config, server, grpcServerServer)
	return app
}

func ProvideApp(log *logrus.Logger, cfg *Config, httpServer *HTTPServer.Server, grpcServer *GRPCServer.Server) *App {
	app := NewApp(log, cfg, httpServer, grpcServer)
	return app
}

func ProvideLogger() *logger.Logger {
	loggerLogger := logger.NewLogger()
	return loggerLogger
}

func ProvideConfig() *Config {
	config := NewConfig()
	return config
}

func ProvideDomainHandler(baseHandler *HTTPServer.BaseHandler, domainUsecase HTTPServer.ManageUsecase) *HTTPServer.DomainHandler {
	domainHandler := HTTPServer.NewDomainHandler(baseHandler, domainUsecase)
	return domainHandler
}

func ProvideFilterHandler(baseHandler *HTTPServer.BaseHandler, manageUsecase HTTPServer.ManageUsecase) *HTTPServer.FilterHandler {
	filterHandler := HTTPServer.NewFilterHandler(baseHandler, manageUsecase)
	return filterHandler
}

func ProvideCheckHandler(baseHandler *HTTPServer.BaseHandler, inspectUsecase HTTPServer.InspectUsecase) *HTTPServer.CheckHandler {
	checkHandler := HTTPServer.NewCheckHandler(baseHandler, inspectUsecase)
	return checkHandler
}

func ProvideReviewHandler(baseHandler *HTTPServer.BaseHandler, reviewUsecase HTTPServer.ReviewUsecase) *HTTPServer.ReviewHandler {
	reviewHandler := HTTPServer.NewReviewHandler(baseHandler, reviewUsecase)
	return reviewHandler
}

func ProvideManageUsecase(domainRepo usecases.DomainRepository, filterRepo usecases.FilterRepository) *usecases.ManageUsecase {
	manageUsecase := usecases.NewManageUsecase(domainRepo, filterRepo)
	return manageUsecase
}

func ProvideInspectUsecase(log *logrus.Logger, accessRepo usecases.AccessRepository, domainRepo usecases.DomainRepository, filterRepo usecases.FilterRepository) *usecases.InspectUsecase {
	inspectUsecase := usecases.NewInspectUsecase(log, accessRepo, domainRepo, filterRepo)
	return inspectUsecase
}

func ProvideReviewUsecase(domainReviewRepo usecases.ReviewRepository) *usecases.ReviewUsecase {
	reviewUsecase := usecases.NewReviewUsecase(domainReviewRepo)
	return reviewUsecase
}

func ProvideDomainRepo(db *gorm.DB) *adapters.DomainRepo {
	domainRepo := adapters.NewDomainRepo(db)
	return domainRepo
}

func ProvideFilterRepo(db *gorm.DB) *adapters.FilterRepo {
	filterRepo := adapters.NewFilterRepo(db)
	return filterRepo
}

func ProvideReviewRepo(db *gorm.DB) *adapters.ReviewRepo {
	reviewRepo := adapters.NewReviewRepo(db)
	return reviewRepo
}

func ProvideAccessRepo(db *gorm.DB) *adapters.AccessRepo {
	accessRepo := adapters.NewAccessRepo(db)
	return accessRepo
}

func ProvideAccessUsecase(apiAccessRepo usecases.AccessRepository) *usecases.AccessUsecase {
	accessUsecase := usecases.NewAccessUsecase(apiAccessRepo)
	return accessUsecase
}

func ProvideAccessHandler(accessUsecase HTTPServer.AccessUsecase) *HTTPServer.AccessHandler {
	accessHandler := HTTPServer.NewAccessHandler(accessUsecase)
	return accessHandler
}

func ProvideGRPCCheckHandler(inspectUsecase GRPCServer.InspectUsecase) *GRPCServer.CheckHandler {
	checkHandler := GRPCServer.NewCheckHandler(inspectUsecase)
	return checkHandler
}

// wire.go:

func ProvideHTTPServer(cfg *Config, log *logrus.Logger, firebaseAuth *HTTPServer.FirebaseAuth,
	checkHandler *HTTPServer.CheckHandler, accessHandler *HTTPServer.AccessHandler,
	domainHandler *HTTPServer.DomainHandler, filterHandler *HTTPServer.FilterHandler) *HTTPServer.Server {
	return HTTPServer.NewHTTPServer(&HTTPServer.Config{
		Config: httpserver.Config{
			Host: cfg.Host,
			Port: cfg.Port,
		},
		Mode: cfg.Mode,
	}, log, firebaseAuth, checkHandler, accessHandler, domainHandler, filterHandler)
}

func ProvideLogrusLogger(log *logger.Logger) *logrus.Logger {
	return log.Logger
}

func ProvideGORMPostgres(log *logrus.Logger, cfg *Config) *gorm.DB {
	db := gormclient.NewPostgresDB(log, cfg.PostgresDSN)
	if err := adapters.AutoMigrateGORM(db); err != nil {
		panic(err)
	}
	return db
}

func ProvideBaseHandler(log *logrus.Logger, cfg *Config) *HTTPServer.BaseHandler {
	return HTTPServer.NewBaseHandler(log, cfg.Mode)
}

func ProvideFirebaseAuthClient(cfg *Config) *auth.Client {
	client, err := gcpclient.NewFirebaseClient(cfg.GcpProjectId, cfg.GoogleApplicationCredentials)
	if err != nil {
		panic(err)
	}
	return client
}

func ProvideFirebaseAuthMiddleware(client *auth.Client) *HTTPServer.FirebaseAuth {
	return HTTPServer.NewFirebaseAuth(client)
}

func ProvideGRPCServer(log *logrus.Logger, cfg *Config, checkHandler *GRPCServer.CheckHandler) *GRPCServer.Server {
	return GRPCServer.NewGRPCServer(&grpcserver.Config{Host: cfg.Host, Port: cfg.Port}, log, checkHandler)
}
